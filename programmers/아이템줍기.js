function solution(rectangle, characterX, characterY, itemX, itemY) {

    // 1 모든 테두리를 찾는다
    //  테두리중 이용가능한 테두리와 이용불가한 테두리가 있다
    //  이용가능한 테두리는 좌표가 특정 조건을 만족한다
    //  좌표의 x값은  특정 x보다 크거나 작다
    //  좌표의 y값은 특정 값보다 크거나 작다
    //  특정 좌표는 안에 감싸여져 있다
    // 이 감싸여져 있다는 조건은 애매한 조건인데
    // 만일 x-1의 좌표에 다른 테두리가 있다고 해서 이것이 감싸여 진것은 아니다.
    // 좌표는 팔방으로 특정 조건을 만족시킨다
    // 다른 박스 안에 있다. 안에 있다는 건 겹쳐졌다는 뜻이 아니다
    //  두번째로 엣지가 다른 박스 안에 있지 않은데도 사용불가한 경우가 있다
    // 이 경우는 엣지가 다른 어떤 상자에도 겹치지 않지만 상하좌우 4개 방향에 둘러싸여져 있다
    // 테두리란 나갈수 있는 방향이 있다는 뜻이다
    //  테두리가 아니라는 말은 4방향에서 나갈 수 있는 방향이 없다는 뜻이다.
    // 좌표는 안에 있다와 밖에 있다로 나뉜다
    //  안에 있는 조건은  x-1, x+1, 등으로 이동했을 때ㅐ 특정 박스 안에 있다고 판정할 수 있으면 된다

    //  다른 박스 안에 있다
    //  테두리에 걸터있다
    //  테두리 밖에 있다
    //  어느 박스에도 걸터있지 않지만 안에 갇혀있다 (가장 어려움)
    //  -> 이 케이스는 다른 엣지에 사방으로 닫혀있는 경우다 왼쪽
    // 다른 박스의 모서리가 하나의 도형을 생성하는 케이스다

    // var answer = 0;
    // return answer;
}

solution([[1,1,7,4],[3,2,5,5],[4,3,6,9],[2,6,8,8]]	, 1, 3, 7, 8)